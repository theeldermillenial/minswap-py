# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2023-12-06T19:42:56+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class BlockContent(BaseModel):
    time: Optional[int] = Field(None, examples=[1641338934])
    """
    Block creation time in UNIX time
    """
    height: Optional[int] = Field(None, examples=[15243593])
    """
    Block number
    """
    hash: Optional[str] = Field(
        None,
        examples=["4ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a"],
    )
    """
    Hash of the block
    """
    slot: Optional[int] = Field(None, examples=[412162133])
    """
    Slot number
    """
    epoch: Optional[int] = Field(None, examples=[425])
    """
    Epoch number
    """
    epoch_slot: Optional[int] = Field(None, examples=[12])
    """
    Slot within the epoch
    """
    slot_leader: Optional[str] = Field(
        None, examples=["pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2qnikdy"]
    )
    """
    Bech32 ID of the slot leader or specific block description in case there is no slot leader
    """
    size: Optional[int] = Field(None, examples=[3])
    """
    Block size in Bytes
    """
    tx_count: Optional[int] = Field(None, examples=[1])
    """
    Number of transactions in the block
    """
    output: Optional[str] = Field(None, examples=["128314491794"])
    """
    Total output within the block in Lovelaces
    """
    fees: Optional[str] = Field(None, examples=["592661"])
    """
    Total fees within the block in Lovelaces
    """
    block_vrf: Optional[str] = Field(
        None,
        examples=["vrf_vk1wf2k6lhujezqcfe00l6zetxpnmh9n6mwhpmhm0dvfh3fxgmdnrfqkms8ty"],
        max_length=65,
        min_length=65,
    )
    """
    VRF key of the block
    """
    op_cert: Optional[str] = Field(
        None,
        examples=["da905277534faf75dae41732650568af545134ee08a3c0392dbefc8096ae177c"],
    )
    """
    The hash of the operational certificate of the block producer
    """
    op_cert_counter: Optional[str] = Field(None, examples=["18"])
    """
    The value of the counter used to produce the operational certificate
    """
    previous_block: Optional[str] = Field(
        None,
        examples=["43ebccb3ac72c7cebd0d9b755a4b08412c9f5dcb81b8a0ad1e3c197d29d47b05"],
    )
    """
    Hash of the previous block
    """
    next_block: Optional[str] = Field(
        None,
        examples=["8367f026cf4b03e116ff8ee5daf149b55ba5a6ec6dec04803b8dc317721d15fa"],
    )
    """
    Hash of the next block
    """
    confirmations: Optional[int] = Field(None, examples=[4698])
    """
    Number of block confirmations
    """


class BlockContentTxs(RootModel[Optional[List[str]]]):
    root: Optional[List[str]] = Field(
        None,
        examples=[
            [
                "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b",
                "4eef6bb7755d8afbeac526b799f3e32a624691d166657e9d862aaeb66682c036",
                "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f",
                "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
            ]
        ],
    )


class BlockContentArray(RootModel[Optional[List[BlockContent]]]):
    root: Optional[List[BlockContent]] = None


class Transaction(BaseModel):
    tx_hash: Optional[str] = None


class BlockContentAddress(BaseModel):
    address: Optional[str] = None
    """
    Address that was affected in the specified block
    """
    transactions: Optional[List[Transaction]] = None
    """
    List of transactions containing the address either in their inputs or outputs. Sorted by transaction index within a block, ascending.
    """


class BlockContentAddresses(RootModel[Optional[List[BlockContentAddress]]]):
    root: Optional[List[BlockContentAddress]] = Field(
        None,
        examples=[
            [
                {
                    "address": "addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv",
                    "transactions": [
                        {
                            "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0"
                        }
                    ],
                },
                {
                    "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
                    "transactions": [
                        {
                            "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157d0"
                        }
                    ],
                },
            ]
        ],
    )


class GenesisContent(BaseModel):
    active_slots_coefficient: Optional[float] = Field(None, examples=[0.05])
    """
    The proportion of slots in which blocks should be issued
    """
    update_quorum: Optional[int] = Field(None, examples=[5])
    """
    Determines the quorum needed for votes on the protocol parameter updates
    """
    max_lovelace_supply: Optional[str] = Field(None, examples=["45000000000000000"])
    """
    The total number of lovelace in the system
    """
    network_magic: Optional[int] = Field(None, examples=[764824073])
    """
    Network identifier
    """
    epoch_length: Optional[int] = Field(None, examples=[432000])
    """
    Number of slots in an epoch
    """
    system_start: Optional[int] = Field(None, examples=[1506203091])
    """
    Time of slot 0 in UNIX time
    """
    slots_per_kes_period: Optional[int] = Field(None, examples=[129600])
    """
    Number of slots in an KES period
    """
    slot_length: Optional[int] = Field(None, examples=[1])
    """
    Duration of one slot in seconds
    """
    max_kes_evolutions: Optional[int] = Field(None, examples=[62])
    """
    The maximum number of time a KES key can be evolved before a pool operator must create a new operational certificate
    """
    security_param: Optional[int] = Field(None, examples=[2160])
    """
    Security parameter k
    """


class EpochContent(BaseModel):
    epoch: Optional[int] = Field(None, examples=[225])
    """
    Epoch number
    """
    start_time: Optional[int] = Field(None, examples=[1603403091])
    """
    Unix time of the start of the epoch
    """
    end_time: Optional[int] = Field(None, examples=[1603835086])
    """
    Unix time of the end of the epoch
    """
    first_block_time: Optional[int] = Field(None, examples=[1603403092])
    """
    Unix time of the first block of the epoch
    """
    last_block_time: Optional[int] = Field(None, examples=[1603835084])
    """
    Unix time of the last block of the epoch
    """
    block_count: Optional[int] = Field(None, examples=[21298])
    """
    Number of blocks within the epoch
    """
    tx_count: Optional[int] = Field(None, examples=[17856])
    """
    Number of transactions within the epoch
    """
    output: Optional[str] = Field(None, examples=["7849943934049314"])
    """
    Sum of all the transactions within the epoch in Lovelaces
    """
    fees: Optional[str] = Field(None, examples=["4203312194"])
    """
    Sum of all the fees within the epoch in Lovelaces
    """
    active_stake: Optional[str] = Field(None, examples=["784953934049314"])
    """
    Sum of all the active stakes within the epoch in Lovelaces
    """


class EpochParamContent(BaseModel):
    epoch: Optional[int] = Field(None, examples=[225])
    """
    Epoch number
    """
    min_fee_a: Optional[int] = Field(None, examples=[44])
    """
    The linear factor for the minimum fee calculation for given epoch
    """
    min_fee_b: Optional[int] = Field(None, examples=[155381])
    """
    The constant factor for the minimum fee calculation
    """
    max_block_size: Optional[int] = Field(None, examples=[65536])
    """
    Maximum block body size in Bytes
    """
    max_tx_size: Optional[int] = Field(None, examples=[16384])
    """
    Maximum transaction size
    """
    max_block_header_size: Optional[int] = Field(None, examples=[1100])
    """
    Maximum block header size
    """
    key_deposit: Optional[str] = Field(None, examples=["2000000"])
    """
    The amount of a key registration deposit in Lovelaces
    """
    pool_deposit: Optional[str] = Field(None, examples=["500000000"])
    """
    The amount of a pool registration deposit in Lovelaces
    """
    e_max: Optional[int] = Field(None, examples=[18])
    """
    Epoch bound on pool retirement
    """
    n_opt: Optional[int] = Field(None, examples=[150])
    """
    Desired number of pools
    """
    a0: Optional[float] = Field(None, examples=[0.3])
    """
    Pool pledge influence
    """
    rho: Optional[float] = Field(None, examples=[0.003])
    """
    Monetary expansion
    """
    tau: Optional[float] = Field(None, examples=[0.2])
    """
    Treasury expansion
    """
    decentralisation_param: Optional[float] = Field(None, examples=[0.5])
    """
    Percentage of blocks produced by federated nodes
    """
    extra_entropy: Optional[str] = Field(None, examples=[None])
    """
    Seed for extra entropy
    """
    protocol_major_ver: Optional[int] = Field(None, examples=[2])
    """
    Accepted protocol major version
    """
    protocol_minor_ver: Optional[int] = Field(None, examples=[0])
    """
    Accepted protocol minor version
    """
    min_utxo: Optional[str] = Field(None, examples=["1000000"])
    """
    Minimum UTXO value
    """
    min_pool_cost: Optional[str] = Field(None, examples=["340000000"])
    """
    Minimum stake cost forced on the pool
    """
    nonce: Optional[str] = Field(
        None,
        examples=["1a3be38bcbb7911969283716ad7aa550250226b76a61fc51cc9a9a35d9276d81"],
    )
    """
    Epoch number only used once
    """
    cost_models: Optional[Dict[str, Any]] = Field(
        None,
        examples=[
            {
                "PlutusV1": {
                    "addInteger-cpu-arguments-intercept": 197209,
                    "addInteger-cpu-arguments-slope": 0,
                },
                "PlutusV2": {
                    "addInteger-cpu-arguments-intercept": 197209,
                    "addInteger-cpu-arguments-slope": 0,
                },
            }
        ],
    )
    """
    Cost models parameters for Plutus Core scripts
    """
    price_mem: Optional[float] = Field(None, examples=[0.0577])
    """
    The per word cost of script memory usage
    """
    price_step: Optional[float] = Field(None, examples=[7.21e-05])
    """
    The cost of script execution step usage
    """
    max_tx_ex_mem: Optional[str] = Field(None, examples=["10000000"])
    """
    The maximum number of execution memory allowed to be used in a single transaction
    """
    max_tx_ex_steps: Optional[str] = Field(None, examples=["10000000000"])
    """
    The maximum number of execution steps allowed to be used in a single transaction
    """
    max_block_ex_mem: Optional[str] = Field(None, examples=["50000000"])
    """
    The maximum number of execution memory allowed to be used in a single block
    """
    max_block_ex_steps: Optional[str] = Field(None, examples=["40000000000"])
    """
    The maximum number of execution steps allowed to be used in a single block
    """
    max_val_size: Optional[str] = Field(None, examples=["5000"])
    """
    The maximum Val size
    """
    collateral_percent: Optional[int] = Field(None, examples=[150])
    """
    The percentage of the transactions fee which must be provided as collateral when including non-native scripts
    """
    max_collateral_inputs: Optional[int] = Field(None, examples=[3])
    """
    The maximum number of collateral inputs allowed in a transaction
    """
    coins_per_utxo_size: Optional[str] = Field(None, examples=["34482"])
    """
    Cost per UTxO word for Alonzo. Cost per UTxO byte for Babbage and later.
    """
    coins_per_utxo_word: Optional[str] = Field(None, examples=["34482"])
    """
    Cost per UTxO word for Alonzo. Cost per UTxO byte for Babbage and later.
    """


class EpochContentArray(RootModel[Optional[List[EpochContent]]]):
    root: Optional[List[EpochContent]] = None


class EpochStakeContentItem(BaseModel):
    stake_address: Optional[str] = Field(
        None, examples=["stake1u9l5q5jwgelgagzyt6nuaasefgmn8pd25c8e9qpeprq0tdcp0e3uk"]
    )
    """
    Stake address
    """
    pool_id: Optional[str] = Field(
        None, examples=["pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"]
    )
    """
    Bech32 prefix of the pool delegated to
    """
    amount: Optional[str] = Field(None, examples=["4440295078"])
    """
    Amount of active delegated stake in Lovelaces
    """


class EpochStakeContent(RootModel[Optional[List[EpochStakeContentItem]]]):
    root: Optional[List[EpochStakeContentItem]] = None


class EpochStakePoolContentItem(BaseModel):
    stake_address: Optional[str] = Field(
        None, examples=["stake1u9l5q5jwgelgagzyt6nuaasefgmn8pd25c8e9qpeprq0tdcp0e3uk"]
    )
    """
    Stake address
    """
    amount: Optional[str] = Field(None, examples=["4440295078"])
    """
    Amount of active delegated stake in Lovelaces
    """


class EpochStakePoolContent(RootModel[Optional[List[EpochStakePoolContentItem]]]):
    root: Optional[List[EpochStakePoolContentItem]] = None


class EpochBlockContent(RootModel[Optional[List[str]]]):
    root: Optional[List[str]] = Field(
        None,
        examples=[
            [
                "d0fa315687e99ccdc96b14cc2ea74a767405d64427b648c470731a9b69e4606e",
                "38bc6efb92a830a0ed22a64f979d120d26483fd3c811f6622a8c62175f530878",
                "f3258fcd8b975c061b4fcdcfcbb438807134d6961ec278c200151274893b6b7d",
            ]
        ],
    )


class OutputAmountItem(BaseModel):
    """
    The sum of all the UTXO per asset
    """

    unit: Optional[str] = None
    """
    The unit of the value
    """
    quantity: Optional[str] = None
    """
    The quantity of the unit
    """


class TxContent(BaseModel):
    hash: Optional[str] = Field(
        None,
        examples=["1e043f100dce12d107f679685acd2fc0610e10f72a92d412794c9773d11d8477"],
    )
    """
    Transaction hash
    """
    block: Optional[str] = Field(
        None,
        examples=["356b7d7dbb696ccd12775c016941057a9dc70898d87a63fc752271bb46856940"],
    )
    """
    Block hash
    """
    block_height: Optional[int] = Field(None, examples=[123456])
    """
    Block number
    """
    block_time: Optional[int] = Field(None, examples=[1635505891])
    """
    Block creation time in UNIX time
    """
    slot: Optional[int] = Field(None, examples=[42000000])
    """
    Slot number
    """
    index: Optional[int] = Field(None, examples=[1])
    """
    Transaction index within the block
    """
    output_amount: Optional[List[OutputAmountItem]] = Field(
        None,
        examples=[
            [
                {"unit": "lovelace", "quantity": "42000000"},
                {
                    "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "12",
                },
            ]
        ],
    )
    fees: Optional[str] = Field(None, examples=["182485"])
    """
    Fees of the transaction in Lovelaces
    """
    deposit: Optional[str] = Field(None, examples=["0"])
    """
    Deposit within the transaction in Lovelaces
    """
    size: Optional[int] = Field(None, examples=[433])
    """
    Size of the transaction in Bytes
    """
    invalid_before: Optional[str] = Field(None, examples=[None])
    """
    Left (included) endpoint of the timelock validity intervals
    """
    invalid_hereafter: Optional[str] = Field(None, examples=["13885913"])
    """
    Right (excluded) endpoint of the timelock validity intervals
    """
    utxo_count: Optional[int] = Field(None, examples=[4])
    """
    Count of UTXOs within the transaction
    """
    withdrawal_count: Optional[int] = Field(None, examples=[0])
    """
    Count of the withdrawals within the transaction
    """
    mir_cert_count: Optional[int] = Field(None, examples=[0])
    """
    Count of the MIR certificates within the transaction
    """
    delegation_count: Optional[int] = Field(None, examples=[0])
    """
    Count of the delegations within the transaction
    """
    stake_cert_count: Optional[int] = Field(None, examples=[0])
    """
    Count of the stake keys (de)registration within the transaction
    """
    pool_update_count: Optional[int] = Field(None, examples=[0])
    """
    Count of the stake pool registration and update certificates within the transaction
    """
    pool_retire_count: Optional[int] = Field(None, examples=[0])
    """
    Count of the stake pool retirement certificates within the transaction
    """
    asset_mint_or_burn_count: Optional[int] = Field(None, examples=[0])
    """
    Count of asset mints and burns within the transaction
    """
    redeemer_count: Optional[int] = Field(None, examples=[0])
    """
    Count of redeemers within the transaction
    """
    valid_contract: Optional[bool] = Field(None, examples=[True])
    """
    True if contract script passed validation
    """


class AmountItem(OutputAmountItem):
    """
    The sum of all the UTXO per asset
    """


class Input(BaseModel):
    address: Optional[str] = Field(
        None,
        examples=[
            "addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv"
        ],
    )
    """
    Input address
    """
    amount: Optional[List[AmountItem]] = Field(
        None,
        examples=[
            [
                {"unit": "lovelace", "quantity": "42000000"},
                {
                    "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "12",
                },
            ]
        ],
    )
    tx_hash: Optional[str] = Field(
        None,
        examples=["1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0"],
    )
    """
    Hash of the UTXO transaction
    """
    output_index: Optional[int] = Field(None, examples=[0])
    """
    UTXO index in the transaction
    """
    data_hash: Optional[str] = Field(
        None,
        examples=["9e478573ab81ea7a8e31891ce0648b81229f408d596a3483e6f4f9b92d3cf710"],
    )
    """
    The hash of the transaction output datum
    """
    inline_datum: Optional[str] = Field(None, examples=["19a6aa"])
    """
    CBOR encoded inline datum
    """
    reference_script_hash: Optional[str] = Field(
        None, examples=["13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1"]
    )
    """
    The hash of the reference script of the input
    """
    collateral: Optional[bool] = Field(None, examples=[False])
    """
    Whether the input is a collateral consumed on script validation failure
    """
    reference: Optional[bool] = Field(None, examples=[False])
    """
    Whether the input is a reference transaction input
    """


class Output(BaseModel):
    address: Optional[str] = Field(
        None,
        examples=[
            "addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv"
        ],
    )
    """
    Output address
    """
    amount: Optional[List[AmountItem]] = Field(
        None,
        examples=[
            [
                {"unit": "lovelace", "quantity": "42000000"},
                {
                    "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "12",
                },
            ]
        ],
    )
    output_index: Optional[int] = Field(None, examples=[0])
    """
    UTXO index in the transaction
    """
    data_hash: Optional[str] = Field(
        None,
        examples=["9e478573ab81ea7a8e31891ce0648b81229f408d596a3483e6f4f9b92d3cf710"],
    )
    """
    The hash of the transaction output datum
    """
    inline_datum: Optional[str] = Field(None, examples=["19a6aa"])
    """
    CBOR encoded inline datum
    """
    collateral: Optional[bool] = Field(None, examples=[False])
    """
    Whether the output is a collateral output
    """
    reference_script_hash: Optional[str] = Field(
        None, examples=["13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1"]
    )
    """
    The hash of the reference script of the output
    """


class TxContentUtxo(BaseModel):
    hash: Optional[str] = Field(
        None,
        examples=["1e043f100dce12d107f679685acd2fc0610e10f72a92d412794c9773d11d8477"],
    )
    """
    Transaction hash
    """
    inputs: Optional[List[Input]] = None
    outputs: Optional[List[Output]] = None


class TxContentStakeAddrItem(BaseModel):
    cert_index: Optional[int] = Field(None, examples=[0])
    """
    Index of the certificate within the transaction
    """
    address: Optional[str] = Field(
        None, examples=["stake1u9t3a0tcwune5xrnfjg4q7cpvjlgx9lcv0cuqf5mhfjwrvcwrulda"]
    )
    """
    Delegation stake address
    """
    registration: Optional[bool] = Field(None, examples=[True])
    """
    Registration boolean, false if deregistration
    """


class TxContentStakeAddr(RootModel[Optional[List[TxContentStakeAddrItem]]]):
    root: Optional[List[TxContentStakeAddrItem]] = None


class TxContentDelegation(BaseModel):
    index: Optional[int] = Field(None, examples=[0])
    """
    Index of the certificate within the transaction
    """
    cert_index: Optional[int] = Field(None, examples=[0])
    """
    Index of the certificate within the transaction
    """
    address: Optional[str] = Field(
        None, examples=["stake1u9r76ypf5fskppa0cmttas05cgcswrttn6jrq4yd7jpdnvc7gt0yc"]
    )
    """
    Bech32 delegation stake address
    """
    pool_id: Optional[str] = Field(
        None, examples=["pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"]
    )
    """
    Bech32 ID of delegated stake pool
    """
    active_epoch: Optional[int] = Field(None, examples=[210])
    """
    Epoch in which the delegation becomes active
    """


class TxContentDelegations(RootModel[Optional[List[TxContentDelegation]]]):
    root: Optional[List[TxContentDelegation]] = None


class TxContentWithdrawal(BaseModel):
    address: Optional[str] = Field(
        None, examples=["stake1u9r76ypf5fskppa0cmttas05cgcswrttn6jrq4yd7jpdnvc7gt0yc"]
    )
    """
    Bech32 withdrawal address
    """
    amount: Optional[str] = Field(None, examples=["431833601"])
    """
    Withdrawal amount in Lovelaces
    """


class TxContentWithdrawals(RootModel[Optional[List[TxContentWithdrawal]]]):
    root: Optional[List[TxContentWithdrawal]] = None


class Pot(Enum):
    """
    Source of MIR funds
    """

    reserve = "reserve"
    treasury = "treasury"


class TxContentMir(BaseModel):
    pot: Optional[Pot] = Field(None, examples=["reserve"])
    """
    Source of MIR funds
    """
    cert_index: Optional[int] = Field(None, examples=[0])
    """
    Index of the certificate within the transaction
    """
    address: Optional[str] = Field(
        None, examples=["stake1u9r76ypf5fskppa0cmttas05cgcswrttn6jrq4yd7jpdnvc7gt0yc"]
    )
    """
    Bech32 stake address
    """
    amount: Optional[str] = Field(None, examples=["431833601"])
    """
    MIR amount in Lovelaces
    """


class TxContentMirs(RootModel[Optional[List[TxContentMir]]]):
    root: Optional[List[TxContentMir]] = None


class Metadata(BaseModel):
    url: Optional[str] = Field(None, examples=["https://stakenuts.com/mainnet.json"])
    """
    URL to the stake pool metadata
    """
    hash: Optional[str] = Field(
        None,
        examples=["47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c"],
    )
    """
    Hash of the metadata file
    """
    ticker: Optional[str] = Field(None, examples=["NUTS"])
    """
    Ticker of the stake pool
    """
    name: Optional[str] = Field(None, examples=["Stake Nuts"])
    """
    Name of the stake pool
    """
    description: Optional[str] = Field(None, examples=["The best pool ever"])
    """
    Description of the stake pool
    """
    homepage: Optional[str] = Field(None, examples=["https://stakentus.com/"])
    """
    Home page of the stake pool
    """


class Relay(BaseModel):
    ipv4: Optional[str] = Field(None, examples=["4.4.4.4"])
    """
    IPv4 address of the relay
    """
    ipv6: Optional[str] = Field(None, examples=["https://stakenuts.com/mainnet.json"])
    """
    IPv6 address of the relay
    """
    dns: Optional[str] = Field(None, examples=["relay1.stakenuts.com"])
    """
    DNS name of the relay
    """
    dns_srv: Optional[str] = Field(None, examples=["_relays._tcp.relays.stakenuts.com"])
    """
    DNS SRV entry of the relay
    """
    port: Optional[int] = Field(None, examples=[3001])
    """
    Network port of the relay
    """


class TxContentPoolCert(BaseModel):
    cert_index: Optional[int] = Field(None, examples=[0])
    """
    Index of the certificate within the transaction
    """
    pool_id: Optional[str] = Field(
        None, examples=["pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"]
    )
    """
    Bech32 encoded pool ID
    """
    vrf_key: Optional[str] = Field(
        None,
        examples=["0b5245f9934ec2151116fb8ec00f35fd00e0aa3b075c4ed12cce440f999d8233"],
    )
    """
    VRF key hash
    """
    pledge: Optional[str] = Field(None, examples=["5000000000"])
    """
    Stake pool certificate pledge in Lovelaces
    """
    margin_cost: Optional[float] = Field(None, examples=[0.05])
    """
    Margin tax cost of the stake pool
    """
    fixed_cost: Optional[str] = Field(None, examples=["340000000"])
    """
    Fixed tax cost of the stake pool in Lovelaces
    """
    reward_account: Optional[str] = Field(
        None, examples=["stake1uxkptsa4lkr55jleztw43t37vgdn88l6ghclfwuxld2eykgpgvg3f"]
    )
    """
    Bech32 reward account of the stake pool
    """
    owners: Optional[List[str]] = Field(
        None, examples=[["stake1u98nnlkvkk23vtvf9273uq7cph5ww6u2yq2389psuqet90sv4xv9v"]]
    )
    metadata: Optional[Metadata] = None
    relays: Optional[List[Relay]] = None
    active_epoch: Optional[int] = Field(None, examples=[210])
    """
    Epoch in which the update becomes active
    """


class TxContentPoolCerts(RootModel[Optional[List[TxContentPoolCert]]]):
    root: Optional[List[TxContentPoolCert]] = None


class TxContentPoolRetire(BaseModel):
    cert_index: Optional[int] = Field(None, examples=[0])
    """
    Index of the certificate within the transaction
    """
    pool_id: Optional[str] = Field(
        None, examples=["pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"]
    )
    """
    Bech32 stake pool ID
    """
    retiring_epoch: Optional[int] = Field(None, examples=[216])
    """
    Epoch in which the pool becomes retired
    """


class TxContentPoolRetires(RootModel[Optional[List[TxContentPoolRetire]]]):
    root: Optional[List[TxContentPoolRetire]] = None


class TxContentMetadatum(BaseModel):
    label: Optional[str] = None
    """
    Metadata label
    """
    json_metadata: Optional[Union[str, Dict[str, Any]]] = None
    """
    Content of the metadata
    """


class TxContentMetadata(RootModel[Optional[List[TxContentMetadatum]]]):
    root: Optional[List[TxContentMetadatum]] = Field(
        None,
        examples=[
            [
                {
                    "label": "1967",
                    "json_metadata": {
                        "metadata": "https://nut.link/metadata.json",
                        "hash": "6bf124f217d0e5a0a8adb1dbd8540e1334280d49ab861127868339f43b3948af",
                    },
                },
                {
                    "label": "1968",
                    "json_metadata": {
                        "ADAUSD": [
                            {"value": "0.10409800535729975", "source": "ergoOracles"}
                        ]
                    },
                },
            ]
        ],
    )


class TxContentMetadataCborItem(BaseModel):
    label: Optional[str] = None
    """
    Metadata label
    """
    cbor_metadata: Optional[str] = None
    """
    Content of the CBOR metadata
    """
    metadata: Optional[str] = None
    """
    Content of the CBOR metadata in hex
    """


class TxContentMetadataCbor(RootModel[Optional[List[TxContentMetadataCborItem]]]):
    root: Optional[List[TxContentMetadataCborItem]] = Field(
        None,
        examples=[
            [
                {
                    "label": "1968",
                    "cbor_metadata": "\\xa100a16b436f6d62696e6174696f6e8601010101010c",
                    "metadata": "a100a16b436f6d62696e6174696f6e8601010101010c",
                }
            ]
        ],
    )


class Purpose(Enum):
    """
    Validation purpose
    """

    spend = "spend"
    mint = "mint"
    cert = "cert"
    reward = "reward"


class TxContentRedeemer(BaseModel):
    tx_index: Optional[int] = Field(None, examples=[0])
    """
    Index of the redeemer within the transaction
    """
    purpose: Optional[Purpose] = Field(None, examples=["spend"])
    """
    Validation purpose
    """
    script_hash: Optional[str] = Field(
        None, examples=["ec26b89af41bef0f7585353831cb5da42b5b37185e0c8a526143b824"]
    )
    """
    Script hash
    """
    redeemer_data_hash: Optional[str] = Field(
        None,
        examples=["923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec"],
    )
    """
    Redeemer data hash
    """
    datum_hash: Optional[str] = Field(
        None,
        examples=["923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec"],
    )
    """
    Datum hash
    """
    unit_mem: Optional[str] = Field(None, examples=["1700"])
    """
    The budget in Memory to run a script
    """
    unit_steps: Optional[str] = Field(None, examples=["476468"])
    """
    The budget in CPU steps to run a script
    """
    fee: Optional[str] = Field(None, examples=["172033"])
    """
    The fee consumed to run the script
    """


class TxContentRedeemers(RootModel[Optional[List[TxContentRedeemer]]]):
    root: Optional[List[TxContentRedeemer]] = None


class AccountContent(BaseModel):
    stake_address: Optional[str] = Field(
        None, examples=["stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7"]
    )
    """
    Bech32 stake address
    """
    active: Optional[bool] = Field(None, examples=[True])
    """
    Registration state of an account
    """
    active_epoch: Optional[int] = Field(None, examples=[412])
    """
    Epoch of the most recent action - registration or deregistration
    """
    controlled_amount: Optional[str] = Field(None, examples=["619154618165"])
    """
    Balance of the account in Lovelaces
    """
    rewards_sum: Optional[str] = Field(None, examples=["319154618165"])
    """
    Sum of all rewards for the account in the Lovelaces
    """
    withdrawals_sum: Optional[str] = Field(None, examples=["12125369253"])
    """
    Sum of all the withdrawals for the account in Lovelaces
    """
    reserves_sum: Optional[str] = Field(None, examples=["319154618165"])
    """
    Sum of all  funds from reserves for the account in the Lovelaces
    """
    treasury_sum: Optional[str] = Field(None, examples=["12000000"])
    """
    Sum of all funds from treasury for the account in the Lovelaces
    """
    withdrawable_amount: Optional[str] = Field(None, examples=["319154618165"])
    """
    Sum of available rewards that haven't been withdrawn yet for the account in the Lovelaces
    """
    pool_id: Optional[str] = Field(
        None, examples=["pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"]
    )
    """
    Bech32 pool ID that owns the account
    """


class Type(Enum):
    """
    Type of the reward
    """

    leader = "leader"
    member = "member"
    pool_deposit_refund = "pool_deposit_refund"


class AccountRewardContentItem(BaseModel):
    epoch: Optional[int] = None
    """
    Epoch of the associated reward
    """
    amount: Optional[str] = None
    """
    Rewards for given epoch in Lovelaces
    """
    pool_id: Optional[str] = None
    """
    Bech32 pool ID being delegated to
    """
    type: Optional[Type] = None
    """
    Type of the reward
    """


class AccountRewardContent(RootModel[Optional[List[AccountRewardContentItem]]]):
    root: Optional[List[AccountRewardContentItem]] = Field(
        None,
        examples=[
            [
                {
                    "epoch": 215,
                    "amount": "12695385",
                    "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                    "type": "member",
                },
                {
                    "epoch": 216,
                    "amount": "3586329",
                    "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                    "type": "member",
                },
                {
                    "epoch": 217,
                    "amount": "1",
                    "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                    "type": "member",
                },
                {
                    "epoch": 217,
                    "amount": "1337",
                    "pool_id": "pool1cytwr0n7eas6du2h2xshl8ypa1yqr18f0erlhhjcuczysiunjcs",
                    "type": "leader",
                },
                {
                    "epoch": 218,
                    "amount": "1395265",
                    "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                    "type": "member",
                },
                {
                    "epoch": 218,
                    "amount": "500000000",
                    "pool_id": "pool1cytwr0n7eas6du2h2xshl8ypa1yqr18f0erlhhjcuczysiunjcs",
                    "type": "pool_deposit_refund",
                },
            ]
        ],
    )


class AccountHistoryContentItem(BaseModel):
    active_epoch: Optional[int] = Field(None, examples=[210])
    """
    Epoch in which the stake was active
    """
    amount: Optional[str] = None
    """
    Stake amount in Lovelaces
    """
    pool_id: Optional[str] = None
    """
    Bech32 ID of pool being delegated to
    """


class AccountHistoryContent(RootModel[Optional[List[AccountHistoryContentItem]]]):
    root: Optional[List[AccountHistoryContentItem]] = Field(
        None,
        examples=[
            [
                {
                    "active_epoch": 210,
                    "amount": "12695385",
                    "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                },
                {
                    "active_epoch": 211,
                    "amount": "22695385",
                    "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                },
            ]
        ],
    )


class AccountDelegationContentItem(BaseModel):
    active_epoch: Optional[int] = Field(None, examples=[210])
    """
    Epoch in which the delegation becomes active
    """
    tx_hash: Optional[str] = None
    """
    Hash of the transaction containing the delegation
    """
    amount: Optional[str] = None
    """
    Rewards for given epoch in Lovelaces
    """
    pool_id: Optional[str] = None
    """
    Bech32 ID of pool being delegated to
    """


class AccountDelegationContent(RootModel[Optional[List[AccountDelegationContentItem]]]):
    root: Optional[List[AccountDelegationContentItem]] = Field(
        None,
        examples=[
            [
                {
                    "active_epoch": 210,
                    "tx_hash": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
                    "amount": "12695385",
                    "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                },
                {
                    "active_epoch": 242,
                    "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0",
                    "amount": "12691385",
                    "pool_id": "pool1kchver88u3kygsak8wgll7htr8uxn5v35lfrsyy842nkscrzyvj",
                },
            ]
        ],
    )


class Action(Enum):
    """
    Action in the certificate
    """

    registered = "registered"
    deregistered = "deregistered"


class AccountRegistrationContentItem(BaseModel):
    tx_hash: Optional[str] = None
    """
    Hash of the transaction containing the (de)registration certificate
    """
    action: Optional[Action] = None
    """
    Action in the certificate
    """


class AccountRegistrationContent(
    RootModel[Optional[List[AccountRegistrationContentItem]]]
):
    root: Optional[List[AccountRegistrationContentItem]] = Field(
        None,
        examples=[
            [
                {
                    "tx_hash": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
                    "action": "registered",
                },
                {
                    "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0",
                    "action": "deregistered",
                },
            ]
        ],
    )


class AccountWithdrawalContentItem(BaseModel):
    tx_hash: Optional[str] = None
    """
    Hash of the transaction containing the withdrawal
    """
    amount: Optional[str] = None
    """
    Withdrawal amount in Lovelaces
    """


class AccountWithdrawalContent(RootModel[Optional[List[AccountWithdrawalContentItem]]]):
    root: Optional[List[AccountWithdrawalContentItem]] = Field(
        None,
        examples=[
            [
                {
                    "tx_hash": "48a9625c841eea0dd2bb6cf551eabe6523b7290c9ce34be74eedef2dd8f7ecc5",
                    "amount": "454541212442",
                },
                {
                    "tx_hash": "4230b0cbccf6f449f0847d8ad1d634a7a49df60d8c142bb8cc2dbc8ca03d9e34",
                    "amount": "97846969",
                },
            ]
        ],
    )


class AccountMirContentItem(BaseModel):
    tx_hash: Optional[str] = None
    """
    Hash of the transaction containing the MIR
    """
    amount: Optional[str] = None
    """
    MIR amount in Lovelaces
    """


class AccountMirContent(RootModel[Optional[List[AccountMirContentItem]]]):
    root: Optional[List[AccountMirContentItem]] = Field(
        None,
        examples=[
            [
                {
                    "tx_hash": "69705bba1d687a816ff5a04ec0c358a1f1ef075ab7f9c6cc2763e792581cec6d",
                    "amount": "2193707473",
                },
                {
                    "tx_hash": "baaa77b63d4d7d2bb3ab02c9b85978c2092c336dede7f59e31ad65452d510c13",
                    "amount": "14520198574",
                },
            ]
        ],
    )


class AccountAddressesContentItem(BaseModel):
    address: Optional[str] = None
    """
    Address associated with the stake key
    """


class AccountAddressesContent(RootModel[Optional[List[AccountAddressesContentItem]]]):
    root: Optional[List[AccountAddressesContentItem]] = Field(
        None,
        examples=[
            [
                {
                    "address": "addr1qx2kd28nq8ac5prwg32hhvudlwggpgfp8utlyqxu6wqgz62f79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9sy0f4qd"
                },
                {
                    "address": "addr1qys3czp8s9thc6u2fqed9yq3h24nyw28uk0m6mkgn9dkckjf79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9suth4w4"
                },
                {
                    "address": "addr1q8j55h253zcvl326sk5qdt2n8z7eghzspe0ekxgncr796s2f79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9sjmd35m"
                },
                {
                    "address": "addr1q8f7gxrprank3drhx8k5grlux7ene0nlwun8y9thu8mc3yjf79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9sls6vnt"
                },
            ]
        ],
    )


class AccountAddressesAsset(BaseModel):
    """
    The sum of all assets of all addresses associated with a given account
    """

    unit: Optional[str] = None
    """
    The unit of the value
    """
    quantity: Optional[str] = None
    """
    The quantity of the unit
    """


class AccountAddressesAssets(RootModel[Optional[List[AccountAddressesAsset]]]):
    root: Optional[List[AccountAddressesAsset]] = Field(
        None,
        examples=[
            [
                {
                    "unit": "d5e6bf0500378d4f0da4e8dde6becec7621cd8cbf5cbb9b87013d4cc537061636542756433343132",
                    "quantity": "1",
                },
                {
                    "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "125",
                },
            ]
        ],
    )


class ReceivedSumItem(BaseModel):
    """
    The sum of all the UTXO per asset for all addresses associated with the account
    """

    unit: Optional[str] = None
    """
    The unit of the value
    """
    quantity: Optional[str] = None
    """
    The quantity of the unit
    """


class SentSumItem(ReceivedSumItem):
    """
    The sum of all the UTXO per asset for all addresses associated with the account
    """


class AccountAddressesTotal(BaseModel):
    stake_address: Optional[str] = Field(
        None, examples=["stake1u9l5q5jwgelgagzyt6nuaasefgmn8pd25c8e9qpeprq0tdcp0e3uk"]
    )
    """
    Bech32 encoded stake address
    """
    received_sum: Optional[List[ReceivedSumItem]] = Field(
        None,
        examples=[
            [
                {"unit": "lovelace", "quantity": "42000000"},
                {
                    "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "12",
                },
            ]
        ],
    )
    sent_sum: Optional[List[SentSumItem]] = Field(
        None,
        examples=[
            [
                {"unit": "lovelace", "quantity": "42000000"},
                {
                    "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "12",
                },
            ]
        ],
    )
    tx_count: Optional[int] = Field(None, examples=[12])
    """
    Count of all transactions for all addresses associated with the account
    """


class MempoolContentItem(BaseModel):
    tx_hash: Optional[str] = None
    """
    Hash of the transaction
    """


class MempoolContent(RootModel[Optional[List[MempoolContentItem]]]):
    root: Optional[List[MempoolContentItem]] = Field(
        None,
        examples=[
            [
                {
                    "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0"
                }
            ]
        ],
    )


class Tx(BaseModel):
    hash: Optional[str] = Field(
        None,
        examples=["1e043f100dce12d107f679685acd2fc0610e10f72a92d412794c9773d11d8477"],
    )
    """
    Transaction hash
    """
    output_amount: Optional[List[OutputAmountItem]] = Field(
        None,
        examples=[
            [
                {"unit": "lovelace", "quantity": "42000000"},
                {
                    "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "12",
                },
            ]
        ],
    )
    fees: Optional[str] = Field(None, examples=["182485"])
    """
    Fees of the transaction in Lovelaces
    """
    deposit: Optional[str] = Field(None, examples=["0"])
    """
    Deposit within the transaction in Lovelaces
    """
    size: Optional[int] = Field(None, examples=[433])
    """
    Size of the transaction in Bytes
    """
    invalid_before: Optional[str] = Field(None, examples=[None])
    """
    Left (included) endpoint of the timelock validity intervals
    """
    invalid_hereafter: Optional[str] = Field(None, examples=["13885913"])
    """
    Right (excluded) endpoint of the timelock validity intervals
    """
    utxo_count: Optional[int] = Field(None, examples=[4])
    """
    Count of UTXOs within the transaction
    """
    withdrawal_count: Optional[int] = Field(None, examples=[0])
    """
    Count of the withdrawals within the transaction
    """
    mir_cert_count: Optional[int] = Field(None, examples=[0])
    """
    Count of the MIR certificates within the transaction
    """
    delegation_count: Optional[int] = Field(None, examples=[0])
    """
    Count of the delegations within the transaction
    """
    stake_cert_count: Optional[int] = Field(None, examples=[0])
    """
    Count of the stake keys (de)registration within the transaction
    """
    pool_update_count: Optional[int] = Field(None, examples=[0])
    """
    Count of the stake pool registration and update certificates within the transaction
    """
    pool_retire_count: Optional[int] = Field(None, examples=[0])
    """
    Count of the stake pool retirement certificates within the transaction
    """
    asset_mint_or_burn_count: Optional[int] = Field(None, examples=[0])
    """
    Count of asset mints and burns within the transaction
    """
    redeemer_count: Optional[int] = Field(None, examples=[0])
    """
    Count of redeemers within the transaction
    """
    valid_contract: Optional[bool] = Field(None, examples=[True])
    """
    True if contract script passed validation
    """


class Input1(BaseModel):
    address: Optional[str] = Field(
        None,
        examples=[
            "addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv"
        ],
    )
    """
    Input address
    """
    tx_hash: Optional[str] = Field(
        None,
        examples=["1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0"],
    )
    """
    Hash of the UTXO transaction
    """
    output_index: Optional[int] = Field(None, examples=[0])
    """
    UTXO index in the transaction
    """
    collateral: Optional[bool] = Field(None, examples=[False])
    """
    Whether the input is a collateral consumed on script validation failure
    """
    reference: Optional[bool] = Field(None, examples=[False])
    """
    Whether the input is a reference transaction input
    """


class Output1(Output):
    pass


class Redeemer(BaseModel):
    tx_index: Optional[int] = Field(None, examples=[0])
    """
    Index of the redeemer within the transaction
    """
    purpose: Optional[Purpose] = Field(None, examples=["spend"])
    """
    Validation purpose
    """
    unit_mem: Optional[str] = Field(None, examples=["1700"])
    """
    The budget in Memory to run a script
    """
    unit_steps: Optional[str] = Field(None, examples=["476468"])
    """
    The budget in CPU steps to run a script
    """


class MempoolTxContent(BaseModel):
    tx: Optional[Tx] = None
    inputs: Optional[List[Input1]] = None
    outputs: Optional[List[Output1]] = None
    redeemers: Optional[List[Redeemer]] = None


class MempoolAddressesContentItem(MempoolContentItem):
    pass


class MempoolAddressesContent(RootModel[Optional[List[MempoolAddressesContentItem]]]):
    root: Optional[List[MempoolAddressesContentItem]] = Field(
        None,
        examples=[
            [
                {
                    "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0"
                }
            ]
        ],
    )


class TxMetadataLabel(BaseModel):
    label: Optional[str] = None
    """
    Metadata label
    """
    cip10: Optional[str] = None
    """
    CIP10 defined description
    """
    count: Optional[str] = None
    """
    The count of metadata entries with a specific label
    """


class TxMetadataLabels(RootModel[Optional[List[TxMetadataLabel]]]):
    root: Optional[List[TxMetadataLabel]] = Field(
        None,
        examples=[
            [
                {"label": "1990", "cip10": None, "count": "1"},
                {
                    "label": "1967",
                    "cip10": "nut.link metadata oracles registry",
                    "count": "3",
                },
                {
                    "label": "1968",
                    "cip10": "nut.link metadata oracles data points",
                    "count": "16321",
                },
            ]
        ],
    )


class TxMetadataLabelJsonItem(BaseModel):
    tx_hash: Optional[str] = None
    """
    Transaction hash that contains the specific metadata
    """
    json_metadata: Optional[Union[str, Dict[str, Any], List, int, float, bool]] = None
    """
    Content of the JSON metadata
    """


class TxMetadataLabelJson(RootModel[Optional[List[TxMetadataLabelJsonItem]]]):
    root: Optional[List[TxMetadataLabelJsonItem]] = Field(
        None,
        examples=[
            [
                {
                    "tx_hash": "257d75c8ddb0434e9b63e29ebb6241add2b835a307aa33aedba2effe09ed4ec8",
                    "json_metadata": {
                        "ADAUSD": [
                            {"value": "0.10409800535729975", "source": "ergoOracles"}
                        ]
                    },
                },
                {
                    "tx_hash": "e865f2cc01ca7381cf98dcdc4de07a5e8674b8ea16e6a18e3ed60c186fde2b9c",
                    "json_metadata": {
                        "ADAUSD": [
                            {"value": "0.15409850555139935", "source": "ergoOracles"}
                        ]
                    },
                },
                {
                    "tx_hash": "4237501da3cfdd53ade91e8911e764bd0699d88fd43b12f44a1f459b89bc91be",
                    "json_metadata": None,
                },
            ]
        ],
    )


class TxMetadataLabelCborItem(BaseModel):
    tx_hash: Optional[str] = None
    """
    Transaction hash that contains the specific metadata
    """
    cbor_metadata: Optional[str] = None
    """
    Content of the CBOR metadata
    """
    metadata: Optional[str] = None
    """
    Content of the CBOR metadata in hex
    """


class TxMetadataLabelCbor(RootModel[Optional[List[TxMetadataLabelCborItem]]]):
    root: Optional[List[TxMetadataLabelCborItem]] = Field(
        None,
        examples=[
            [
                {
                    "tx_hash": "257d75c8ddb0434e9b63e29ebb6241add2b835a307aa33aedba2effe09ed4ec8",
                    "cbor_metadata": None,
                    "metadata": None,
                },
                {
                    "tx_hash": "e865f2cc01ca7381cf98dcdc4de07a5e8674b8ea16e6a18e3ed60c186fde2b9c",
                    "cbor_metadata": None,
                    "metadata": None,
                },
                {
                    "tx_hash": "4237501da3cfdd53ade91e8911e764bd0699d88fd43b12f44a1f459b89bc91be",
                    "cbor_metadata": "\\xa100a16b436f6d62696e6174696f6e8601010101010c",
                    "metadata": "a100a16b436f6d62696e6174696f6e8601010101010c",
                },
            ]
        ],
    )


class Type1(Enum):
    """
    Address era
    """

    byron = "byron"
    shelley = "shelley"


class AddressContent(BaseModel):
    address: Optional[str] = Field(
        None,
        examples=[
            "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
        ],
    )
    """
    Bech32 encoded addresses
    """
    amount: Optional[List[AmountItem]] = Field(
        None,
        examples=[
            [
                {"unit": "lovelace", "quantity": "42000000"},
                {
                    "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "12",
                },
            ]
        ],
    )
    stake_address: Optional[str] = Field(
        None, examples=["stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7"]
    )
    """
    Stake address that controls the key
    """
    type: Optional[Type1] = Field(None, examples=["shelley"])
    """
    Address era
    """
    script: Optional[bool] = Field(None, examples=[False])
    """
    True if this is a script address
    """


class AmountItem4(BaseModel):
    """
    The sum of all the UTXO per asset
    """

    unit: Optional[str] = None
    """
    The unit of the value
    """
    quantity: Optional[str] = None
    """
    The quantity of the unit
    """
    decimals: Optional[int] = None
    """
    Number of decimal places of the asset unit. Primary data source is CIP68 reference NFT with a fallback to off-chain metadata.
    """
    has_nft_onchain_metadata: Optional[bool] = None
    """
    True if the latest minting transaction includes metadata (best-effort)
    """


class AddressContentExtended(BaseModel):
    address: Optional[str] = Field(
        None,
        examples=[
            "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
        ],
    )
    """
    Bech32 encoded addresses
    """
    amount: Optional[List[AmountItem4]] = Field(
        None,
        examples=[
            [
                {
                    "unit": "lovelace",
                    "quantity": "42000000",
                    "decimals": 6,
                    "has_nft_onchain_metadata": False,
                },
                {
                    "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "12",
                    "decimals": None,
                    "has_nft_onchain_metadata": True,
                },
            ]
        ],
    )
    stake_address: Optional[str] = Field(
        None, examples=["stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7"]
    )
    """
    Stake address that controls the key
    """
    type: Optional[Type1] = Field(None, examples=["shelley"])
    """
    Address era
    """
    script: Optional[bool] = Field(None, examples=[False])
    """
    True if this is a script address
    """


class ReceivedSumItem1(OutputAmountItem):
    """
    The sum of all the UTXO per asset
    """


class SentSumItem1(OutputAmountItem):
    """
    The sum of all the UTXO per asset
    """


class AddressContentTotal(BaseModel):
    address: Optional[str] = Field(
        None,
        examples=[
            "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
        ],
    )
    """
    Bech32 encoded address
    """
    received_sum: Optional[List[ReceivedSumItem1]] = Field(
        None,
        examples=[
            [
                {"unit": "lovelace", "quantity": "42000000"},
                {
                    "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "12",
                },
            ]
        ],
    )
    sent_sum: Optional[List[SentSumItem1]] = Field(
        None,
        examples=[
            [
                {"unit": "lovelace", "quantity": "42000000"},
                {
                    "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "12",
                },
            ]
        ],
    )
    tx_count: Optional[int] = Field(None, examples=[12])
    """
    Count of all transactions on the address
    """


class AmountItem5(OutputAmountItem):
    """
    The sum of all the UTXO per asset
    """


class AddressUtxoContentItem(BaseModel):
    address: Optional[str] = Field(
        None,
        examples=[
            "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
        ],
    )
    """
    Bech32 encoded addresses - useful when querying by payment_cred
    """
    tx_hash: Optional[str] = None
    """
    Transaction hash of the UTXO
    """
    tx_index: Optional[int] = None
    """
    UTXO index in the transaction
    """
    output_index: Optional[int] = None
    """
    UTXO index in the transaction
    """
    amount: Optional[List[AmountItem5]] = None
    block: Optional[str] = None
    """
    Block hash of the UTXO
    """
    data_hash: Optional[str] = None
    """
    The hash of the transaction output datum
    """
    inline_datum: Optional[str] = Field(None, examples=["19a6aa"])
    """
    CBOR encoded inline datum
    """
    reference_script_hash: Optional[str] = Field(
        None, examples=["13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1"]
    )
    """
    The hash of the reference script of the output
    """


class AddressUtxoContent(RootModel[Optional[List[AddressUtxoContentItem]]]):
    root: Optional[List[AddressUtxoContentItem]] = Field(
        None,
        examples=[
            [
                {
                    "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
                    "tx_hash": "39a7a284c2a0948189dc45dec670211cd4d72f7b66c5726c08d9b3df11e44d58",
                    "output_index": 0,
                    "amount": [{"unit": "lovelace", "quantity": "42000000"}],
                    "block": "7eb8e27d18686c7db9a18f8bbcfe34e3fed6e047afaa2d969904d15e934847e6",
                    "data_hash": "9e478573ab81ea7a8e31891ce0648b81229f408d596a3483e6f4f9b92d3cf710",
                    "inline_datum": None,
                    "reference_script_hash": None,
                },
                {
                    "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
                    "tx_hash": "4c4e67bafa15e742c13c592b65c8f74c769cd7d9af04c848099672d1ba391b49",
                    "output_index": 0,
                    "amount": [{"unit": "lovelace", "quantity": "729235000"}],
                    "block": "953f1b80eb7c11a7ffcd67cbd4fde66e824a451aca5a4065725e5174b81685b7",
                    "data_hash": None,
                    "inline_datum": None,
                    "reference_script_hash": None,
                },
                {
                    "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
                    "tx_hash": "768c63e27a1c816a83dc7b07e78af673b2400de8849ea7e7b734ae1333d100d2",
                    "output_index": 1,
                    "amount": [
                        {"unit": "lovelace", "quantity": "42000000"},
                        {
                            "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                            "quantity": "12",
                        },
                    ],
                    "block": "5c571f83fe6c784d3fbc223792627ccf0eea96773100f9aedecf8b1eda4544d7",
                    "data_hash": None,
                    "inline_datum": None,
                    "reference_script_hash": None,
                },
            ]
        ],
    )


class AddressTxsContent(RootModel[Optional[List[str]]]):
    root: Optional[List[str]] = Field(
        None,
        examples=[
            [
                "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
                "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0",
            ]
        ],
    )


class AddressTransactionsContentItem(BaseModel):
    tx_hash: Optional[str] = None
    """
    Hash of the transaction
    """
    tx_index: Optional[int] = None
    """
    Transaction index within the block
    """
    block_height: Optional[int] = None
    """
    Block height
    """
    block_time: Optional[int] = None
    """
    Block creation time in UNIX time
    """


class AddressTransactionsContent(
    RootModel[Optional[List[AddressTransactionsContentItem]]]
):
    root: Optional[List[AddressTransactionsContentItem]] = Field(
        None,
        examples=[
            [
                {
                    "tx_hash": "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b",
                    "tx_index": 6,
                    "block_height": 69,
                    "block_time": 1635505891,
                },
                {
                    "tx_hash": "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f",
                    "tx_index": 9,
                    "block_height": 4547,
                    "block_time": 1635505987,
                },
                {
                    "tx_hash": "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
                    "tx_index": 0,
                    "block_height": 564654,
                    "block_time": 1834505492,
                },
            ]
        ],
    )


class PoolList(RootModel[Optional[List[str]]]):
    root: Optional[List[str]] = Field(
        None,
        examples=[
            [
                "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                "pool1hn7hlwrschqykupwwrtdfkvt2u4uaxvsgxyh6z63703p2knj288",
                "pool1ztjyjfsh432eqetadf82uwuxklh28xc85zcphpwq6mmezavzad2",
            ]
        ],
    )


class PoolListExtendedItem(BaseModel):
    pool_id: Optional[str] = Field(
        None, examples=["pool1z5uqdk7dzdxaae5633fqfcu2eqzy3a3rgtuvy087fdld7yws0xt"]
    )
    """
    Bech32 encoded pool ID
    """
    hex: Optional[str] = Field(
        None, examples=["0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735"]
    )
    """
    Hexadecimal pool ID.
    """
    active_stake: Optional[str] = Field(None, examples=["4200000000"])
    """
    Active delegated amount
    """
    live_stake: Optional[str] = Field(None, examples=["6900000000"])
    """
    Currently delegated amount
    """


class PoolListExtended(RootModel[Optional[List[PoolListExtendedItem]]]):
    root: Optional[List[PoolListExtendedItem]] = Field(
        None,
        examples=[
            [
                {
                    "pool_id": "pool19u64770wqp6s95gkajc8udheske5e6ljmpq33awxk326zjaza0q",
                    "hex": "2f355f79ee007502d116ecb07e36f985b34cebf2d84118f5c6b455a1",
                    "active_stake": "1541200000",
                    "live_stake": "1541400000",
                },
                {
                    "pool_id": "pool1dvla4zq98hpvacv20snndupjrqhuc79zl6gjap565nku6et5zdx",
                    "hex": "6b3fda88053dc2cee18a7c2736f032182fcc78a2fe912e869aa4edcd",
                    "active_stake": "22200000",
                    "live_stake": "48955550",
                },
                {
                    "pool_id": "pool1wvccajt4eugjtf3k0ja3exjqdj7t8egsujwhcw4tzj4rzsxzw5w",
                    "hex": "73318ec975cf1125a6367cbb1c9a406cbcb3e510e49d7c3aab14aa31",
                    "active_stake": "9989541215",
                    "live_stake": "168445464878",
                },
            ]
        ],
    )


class PoolListRetireItem(BaseModel):
    pool_id: Optional[str] = Field(
        None, examples=["pool1z5uqdk7dzdxaae5633fqfcu2eqzy3a3rgtuvy087fdld7yws0xt"]
    )
    """
    Bech32 encoded pool ID
    """
    epoch: Optional[int] = Field(None, examples=[242])
    """
    Retirement epoch number
    """


class PoolListRetire(RootModel[Optional[List[PoolListRetireItem]]]):
    root: Optional[List[PoolListRetireItem]] = Field(
        None,
        examples=[
            [
                {
                    "pool_id": "pool19u64770wqp6s95gkajc8udheske5e6ljmpq33awxk326zjaza0q",
                    "epoch": 225,
                },
                {
                    "pool_id": "pool1dvla4zq98hpvacv20snndupjrqhuc79zl6gjap565nku6et5zdx",
                    "epoch": 215,
                },
                {
                    "pool_id": "pool1wvccajt4eugjtf3k0ja3exjqdj7t8egsujwhcw4tzj4rzsxzw5w",
                    "epoch": 231,
                },
            ]
        ],
    )


class Pool(BaseModel):
    pool_id: Optional[str] = Field(
        None, examples=["pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"]
    )
    """
    Bech32 pool ID
    """
    hex: Optional[str] = Field(
        None, examples=["0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735"]
    )
    """
    Hexadecimal pool ID.
    """
    vrf_key: Optional[str] = Field(
        None,
        examples=["0b5245f9934ec2151116fb8ec00f35fd00e0aa3b075c4ed12cce440f999d8233"],
    )
    """
    VRF key hash
    """
    blocks_minted: Optional[int] = Field(None, examples=[69])
    """
    Total minted blocks
    """
    blocks_epoch: Optional[int] = Field(None, examples=[4])
    """
    Number of blocks minted in the current epoch
    """
    live_stake: Optional[str] = Field(None, examples=["6900000000"])
    live_size: Optional[float] = Field(None, examples=[0.42])
    live_saturation: Optional[float] = Field(None, examples=[0.93])
    live_delegators: Optional[float] = Field(None, examples=[127])
    active_stake: Optional[str] = Field(None, examples=["4200000000"])
    active_size: Optional[float] = Field(None, examples=[0.43])
    declared_pledge: Optional[str] = Field(None, examples=["5000000000"])
    """
    Stake pool certificate pledge
    """
    live_pledge: Optional[str] = Field(None, examples=["5000000001"])
    """
    Stake pool current pledge
    """
    margin_cost: Optional[float] = Field(None, examples=[0.05])
    """
    Margin tax cost of the stake pool
    """
    fixed_cost: Optional[str] = Field(None, examples=["340000000"])
    """
    Fixed tax cost of the stake pool
    """
    reward_account: Optional[str] = Field(
        None, examples=["stake1uxkptsa4lkr55jleztw43t37vgdn88l6ghclfwuxld2eykgpgvg3f"]
    )
    """
    Bech32 reward account of the stake pool
    """
    owners: Optional[List[str]] = Field(
        None, examples=[["stake1u98nnlkvkk23vtvf9273uq7cph5ww6u2yq2389psuqet90sv4xv9v"]]
    )
    registration: Optional[List[str]] = Field(
        None,
        examples=[
            [
                "9f83e5484f543e05b52e99988272a31da373f3aab4c064c76db96643a355d9dc",
                "7ce3b8c433bf401a190d58c8c483d8e3564dfd29ae8633c8b1b3e6c814403e95",
                "3e6e1200ce92977c3fe5996bd4d7d7e192bcb7e231bc762f9f240c76766535b9",
            ]
        ],
    )
    retirement: Optional[List[str]] = None


class PoolHistoryItem(BaseModel):
    epoch: Optional[int] = Field(None, examples=[233])
    """
    Epoch number
    """
    blocks: Optional[int] = Field(None, examples=[22])
    """
    Number of blocks created by pool
    """
    active_stake: Optional[str] = Field(None, examples=["20485965693569"])
    """
    Active (Snapshot of live stake 2 epochs ago) stake in Lovelaces
    """
    active_size: Optional[float] = Field(None, examples=[1.2345])
    """
    Pool size (percentage) of overall active stake at that epoch
    """
    delegators_count: Optional[int] = Field(None, examples=[115])
    """
    Number of delegators for epoch
    """
    rewards: Optional[str] = Field(None, examples=["206936253674159"])
    """
    Total rewards received before distribution to delegators
    """
    fees: Optional[str] = Field(None, examples=["1290968354"])
    """
    Pool operator rewards
    """


class PoolHistory(RootModel[Optional[List[PoolHistoryItem]]]):
    root: Optional[List[PoolHistoryItem]] = None


class PoolMetadata(BaseModel):
    pool_id: Optional[str] = Field(
        None, examples=["pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"]
    )
    """
    Bech32 pool ID
    """
    hex: Optional[str] = Field(
        None, examples=["0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735"]
    )
    """
    Hexadecimal pool ID
    """
    url: Optional[str] = Field(None, examples=["https://stakenuts.com/mainnet.json"])
    """
    URL to the stake pool metadata
    """
    hash: Optional[str] = Field(
        None,
        examples=["47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c"],
    )
    """
    Hash of the metadata file
    """
    ticker: Optional[str] = Field(None, examples=["NUTS"])
    """
    Ticker of the stake pool
    """
    name: Optional[str] = Field(None, examples=["Stake Nuts"])
    """
    Name of the stake pool
    """
    description: Optional[str] = Field(None, examples=["The best pool ever"])
    """
    Description of the stake pool
    """
    homepage: Optional[str] = Field(None, examples=["https://stakentus.com/"])
    """
    Home page of the stake pool
    """


class EmptyObject(BaseModel):
    pass


class PoolRelay(Relay):
    pass


class PoolRelays(RootModel[Optional[List[PoolRelay]]]):
    root: Optional[List[PoolRelay]] = None


class PoolDelegator(BaseModel):
    address: Optional[str] = None
    """
    Bech32 encoded stake addresses
    """
    live_stake: Optional[str] = None
    """
    Currently delegated amount
    """


class PoolDelegators(RootModel[Optional[List[PoolDelegator]]]):
    root: Optional[List[PoolDelegator]] = Field(
        None,
        examples=[
            [
                {
                    "address": "stake1ux4vspfvwuus9uwyp5p3f0ky7a30jq5j80jxse0fr7pa56sgn8kha",
                    "live_stake": "1137959159981411",
                },
                {
                    "address": "stake1uylayej7esmarzd4mk4aru37zh9yz0luj3g9fsvgpfaxulq564r5u",
                    "live_stake": "16958865648",
                },
                {
                    "address": "stake1u8lr2pnrgf8f7vrs9lt79hc3sxm8s2w4rwvgpncks3axx6q93d4ck",
                    "live_stake": "18605647",
                },
            ]
        ],
    )


class PoolBlocks(RootModel[Optional[List[str]]]):
    root: Optional[List[str]] = Field(
        None,
        examples=[
            [
                "d8982ca42cfe76b747cc681d35d671050a9e41e9cfe26573eb214e94fe6ff21d",
                "026436c539e2ce84c7f77ffe669f4e4bbbb3b9c53512e5857dcba8bb0b4e9a8c",
                "bcc8487f419b8c668a18ea2120822a05df6dfe1de1f0fac3feba88cf760f303c",
                "86bf7b4a274e0f8ec9816171667c1b4a0cfc661dc21563f271acea9482b62df7",
            ]
        ],
    )


class PoolUpdate(BaseModel):
    tx_hash: Optional[str] = None
    """
    Transaction ID
    """
    cert_index: Optional[int] = None
    """
    Certificate within the transaction
    """
    action: Optional[Action] = None
    """
    Action in the certificate
    """


class PoolUpdates(RootModel[Optional[List[PoolUpdate]]]):
    root: Optional[List[PoolUpdate]] = Field(
        None,
        examples=[
            [
                {
                    "tx_hash": "6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad",
                    "cert_index": 0,
                    "action": "registered",
                },
                {
                    "tx_hash": "9c190bc1ac88b2ab0c05a82d7de8b71b67a9316377e865748a89d4426c0d3005",
                    "cert_index": 0,
                    "action": "deregistered",
                },
                {
                    "tx_hash": "e14a75b0eb2625de7055f1f580d70426311b78e0d36dd695a6bdc96c7b3d80e0",
                    "cert_index": 1,
                    "action": "registered",
                },
            ]
        ],
    )


class Asset(BaseModel):
    asset: Optional[str] = None
    """
    Asset identifier
    """
    quantity: Optional[str] = None
    """
    Current asset quantity
    """


class Assets(RootModel[Optional[List[Asset]]]):
    root: Optional[List[Asset]] = Field(
        None,
        examples=[
            [
                {
                    "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "1",
                },
                {
                    "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e75d",
                    "quantity": "100000",
                },
                {
                    "asset": "6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad",
                    "quantity": "18605647",
                },
            ]
        ],
    )


class OnchainMetadataStandard(Enum):
    """
    If on-chain metadata passes validation, we display the standard
    under which it is valid

    """

    CIP25v1 = "CIP25v1"
    CIP25v2 = "CIP25v2"
    CIP68v1 = "CIP68v1"


class Metadata1(BaseModel):
    """
    Off-chain metadata fetched from GitHub based on network.
    Mainnet: https://github.com/cardano-foundation/cardano-token-registry/
    Testnet: https://github.com/input-output-hk/metadata-registry-testnet/

    """

    name: Optional[str] = Field(None, examples=["nutcoin"])
    """
    Asset name
    """
    description: Optional[str] = Field(None, examples=["The Nut Coin"])
    """
    Asset description
    """
    ticker: Optional[str] = Field(None, examples=["nutc"])
    url: Optional[str] = Field(None, examples=["https://www.stakenuts.com/"])
    """
    Asset website
    """
    logo: Optional[str] = Field(
        None,
        examples=[
            "iVBORw0KGgoAAAANSUhEUgAAADAAAAAoCAYAAAC4h3lxAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QA/wD/AP+gvaeTAAAAB3RJTUUH5QITCDUPjqwFHwAAB9xJREFUWMPVWXtsU9cZ/8499/r6dZ3E9rUdO7ZDEgglFWO8KaOsJW0pCLRKrN1AqqYVkqoqrYo0ja7bpElru1WairStFKY9WzaE1E1tx+jokKqwtqFNyhKahEJJyJNgJ37E9r1+3HvO/sFR4vhx7SBtfH/F3/l93/f7ne/4PBxEKYU72dj/ZfH772v1TU+HtqbTaX8wOO01GPQpRVH7JEm+vGHDuq6z7/8jUSoHKtaBKkEUFUXdajDy1hUrmrs6zn/wWS7m7pZVjMUirKGUTnzc+e9xLcTrPPVfZzDz06Sc2lyQGEIyAPzT7Xa+dvE/3e+XLaCxoflHsVj8MAAYs74aa/WHoenwvpkZKeFy2Z5NJlOPUkqXZccFwSSrKjlyffjLH+TL6XTUGTGL/6hklD3ldIrj2M5MRmkLBMcvaRLQ1Nj88sxM/HCBfMP+eu/OYGDqe6l0WmpoqJ/88upgrU7HrQNA/cFg6MlkKiLlBtVUO40cx54BgHvLIT/HJLvdeqh/4NKxogKWN7fsCoUi7xTLxLJ4vLq6ak//wKVOrdXtttrTDMPsqJA8AAAwDErdu3VL3alTf5ma9eWCpoKhn5dKpCiqJxicPucQPVu0FHaInn35yHMcKwPAa4SQ3QCwFgDWUko3qSr5vqqSgTypuEg4Mo/zvA74/Y0rZSnZU8akSHV17k2fXfy0txjI5224kEym1s/1EUI7LBbztweHrkzkizn49LP6U6feepFSeggAQK/n04SQZ8bGrxdeQjZrbRvGzLH5hcibRqOhPplMfS1fIY5jz4xPDBdcGggho2h3z9sOLRazdG3wqp9SMgUlzGZ17SSEPsRx7J8CwfGu3PF57WhqqjfN/VxVJUxKUrIdITAXKpDJKFscosdfaFy0u+/K9aXTmXe0kAcAmA5Nng5Hbj6Tj/wCAYFAcN7uEY3GXGazMSHLqVVFapgBoMPna9yqhRAAgCTJMa3YUjZPgNFkSlWYx5eUkx+0tKx83V3rF+cVYJjruWCe133DIXqMmrNrFSDabRcWkywYmG5XFOW6aHcfb9324CoAgMmbo9MIoXkneCajiAihV/c/8eSiBSw4BxyiZxQA6m7H7FBKT2CMn2MY5jFFUX6ZO+5w2j8aHZ7YH40FByrJD5DnHGAY5uTtIA8AgBDaR4F2Yxb3WizCgmtA4ObUPSazodduqz3Suu0hf0U1cjvgdNSJ1dWWveFwdDUAtAiC2Uopdcdi8c9Zlh3GmDGl05mtAKAvo47EcdwThJCjqqpWFxALlNITomg73tff21GRAJez7iVK4WGGYfoJIQduBsbm7UrLm1ueCoUiv65kpiilw1ZbzcFoZOYoIcRTAn6eYZgXJm+Oni+Vd3YJbdyweSch9HlK6SpVVfcyDDq7Yf3m2XPBIXraKyV/a4b9UkLawbLsZgB4rwR8CyGkw13r+5fX27BckwBAEJ47oKpk8+DgUIdod7fV1vqOAMDrlZLPmqKoB+rrvXIgOP6w0WjYy3Ls5RL4bUk52bVm9fqnCk7M3CXU2ND8+MxM7BcIIftiyRYyntcdHh0bmr0wfmXl6p2SJB2KRmP3l4j7zejYUFtRAQAAgslm1Bv4nyGEDpYiIwjmjw0G/RjP866JiclNqqqWfKLq9fyZkdHBBXcnl9O71GDgD8bj0ncRQqZ8sRgzL9yYHH2pqICsOUTPLgA4CXNeZFmzWIS/YhYfjUZmvqPjuceSckrz25pS2h2cmlhbaBwhzr6kfsnL8Xhif55YYFl23Y3Jkdl7EVMoUSA4/q6qqNsBIPd11e52u45FwtG3CSH7yiEPAGC1Vt9dXGBmanDoygFLlbAjtzZCCMyC6VeaOpA1l9N7l1kwtauKaozHE28YTQaQpeR7+TqjxXheR0fHhhgt2CX1S3clEtKC16HL5djYe+niBU0CcmYA2W21/Qih5ZqDcoxlMZ24MaJJAABA87IVJ8Lh6N65Pr1B/+LIyLUfAhRZQvnM6ah7ZDHkAQB0vK6/HHxNTc2ruT5Zkldn/y5LACFk+2LIAwAwCGl6yGSt88KHXbmrBCHkqEgAz+vWLFZALJb4qNwYhFDhCSknkSwnQ4sVgDFeWg7+gQe2r1tAmkGTFQlACHWVg89nhJA9ot3dphV/eeCLp/Pw6K5IQP0S39uLFXCLwDG7zf1cKZxD9LSlUunHc/12u/2t2Vzl/rzu8zb8PZlM7bwdQgDgPK/nX2nddt+53//ht3LW2dS0fF0iLj2vquojuQFmwXRucPBKa8UCmpe1iOFwpAsAfLdJBFBKwVIlXJ2JxqKCxbwyHkvoCkAlv9/71U+7Oq+UJWDZ0hViJBL1cRynbNq0sSeeiPl6ei4NqIqq6TSmlB7X6bjuTEY5pgWfzwxGPZhMpt39/b3vzvWXFGCzulZjjM/DrauDwcAr8bjcgzGjZUuVBMH8k2uDX7wCAFDr8n2LEPI7SqmhTP6SzVbz6MDlz0/nDpT8EmOM22HOvUeWU2wp8iyLgRL6hk7Hrc2SBwC4MTlykmXZRozxn00mbVcphNA5jJmV+chr6oDd5l6jN/A/TqfSuwEAGITGMIsvGo3GTwTB3Dc2NjGSxdZYq4VIOOoNBANnKE0XPXE3brjHOTQ08k2MmVZOxzVJCbkFIQSCYEphzPaFQuGzTpfjb319PZ8UFXin/5OvrHPg/9HueAH/BSUqOuNZm4fyAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIxLTAyLTE5VDA4OjUyOjI1KzAwOjAwCmFGlgAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMS0wMi0xOVQwODo1MjoyMyswMDowMBjsyxAAAAAASUVORK5CYII="
        ],
    )
    """
    Base64 encoded logo of the asset
    """
    decimals: Optional[int] = Field(None, examples=[6], le=255)
    """
    Number of decimal places of the asset unit
    """


class Asset1(BaseModel):
    asset: Optional[str] = Field(
        None,
        examples=[
            "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e"
        ],
    )
    """
    Hex-encoded asset full name
    """
    policy_id: Optional[str] = Field(
        None, examples=["b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a7"]
    )
    """
    Policy ID of the asset
    """
    asset_name: Optional[str] = Field(None, examples=["6e7574636f696e"])
    """
    Hex-encoded asset name of the asset
    """
    fingerprint: Optional[str] = Field(
        None, examples=["asset1pkpwyknlvul7az0xx8czhl60pyel45rpje4z8w"]
    )
    """
    CIP14 based user-facing fingerprint
    """
    quantity: Optional[str] = Field(None, examples=["12000"])
    """
    Current asset quantity
    """
    initial_mint_tx_hash: Optional[str] = Field(
        None,
        examples=["6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad"],
    )
    """
    ID of the initial minting transaction
    """
    mint_or_burn_count: Optional[int] = Field(None, examples=[1])
    """
    Count of mint and burn transactions
    """
    onchain_metadata: Optional[Dict[str, Any]] = None
    """
    On-chain metadata which SHOULD adhere to the valid standards,
    based on which we perform the look up and display the asset
    (best effort)

    """
    onchain_metadata_standard: Optional[OnchainMetadataStandard] = None
    """
    If on-chain metadata passes validation, we display the standard
    under which it is valid

    """
    onchain_metadata_extra: Optional[str] = None
    """
    Arbitrary plutus data (CIP68).

    """
    metadata: Optional[Metadata1] = None
    """
    Off-chain metadata fetched from GitHub based on network.
    Mainnet: https://github.com/cardano-foundation/cardano-token-registry/
    Testnet: https://github.com/input-output-hk/metadata-registry-testnet/

    """


class Action2(Enum):
    """
    Action executed upon the asset policy
    """

    minted = "minted"
    burned = "burned"


class AssetHistoryItem(BaseModel):
    tx_hash: Optional[str] = None
    """
    Hash of the transaction containing the asset action
    """
    action: Optional[Action2] = None
    """
    Action executed upon the asset policy
    """
    amount: Optional[str] = None
    """
    Asset amount of the specific action
    """


class AssetHistory(RootModel[Optional[List[AssetHistoryItem]]]):
    root: Optional[List[AssetHistoryItem]] = Field(
        None,
        examples=[
            [
                {
                    "tx_hash": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
                    "amount": "10",
                    "action": "minted",
                },
                {
                    "tx_hash": "9c190bc1ac88b2ab0c05a82d7de8b71b67a9316377e865748a89d4426c0d3005",
                    "amount": "5",
                    "action": "burned",
                },
                {
                    "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0",
                    "amount": "5",
                    "action": "burned",
                },
            ]
        ],
    )


class AssetTxs(RootModel[Optional[List[str]]]):
    root: Optional[List[str]] = Field(
        None,
        examples=[
            [
                "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b",
                "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f",
                "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
            ]
        ],
    )


class AssetTransaction(BaseModel):
    tx_hash: Optional[str] = None
    """
    Hash of the transaction
    """
    tx_index: Optional[int] = None
    """
    Transaction index within the block
    """
    block_height: Optional[int] = None
    """
    Block height
    """
    block_time: Optional[int] = Field(None, examples=[1635505891])
    """
    Block creation time in UNIX time
    """


class AssetTransactions(RootModel[Optional[List[AssetTransaction]]]):
    root: Optional[List[AssetTransaction]] = Field(
        None,
        examples=[
            [
                {
                    "tx_hash": "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b",
                    "tx_index": 6,
                    "block_height": 69,
                    "block_time": 1635505891,
                },
                {
                    "tx_hash": "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f",
                    "tx_index": 9,
                    "block_height": 4547,
                    "block_time": 1635505987,
                },
                {
                    "tx_hash": "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
                    "tx_index": 0,
                    "block_height": 564654,
                    "block_time": 1834505492,
                },
            ]
        ],
    )


class AssetAddress(BaseModel):
    address: Optional[str] = None
    """
    Address containing the specific asset
    """
    quantity: Optional[str] = None
    """
    Asset quantity on the specific address
    """


class AssetAddresses(RootModel[Optional[List[AssetAddress]]]):
    root: Optional[List[AssetAddress]] = Field(
        None,
        examples=[
            [
                {
                    "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
                    "quantity": "1",
                },
                {
                    "address": "addr1qyhr4exrgavdcn3qhfcc9f939fzsch2re5ry9cwvcdyh4x4re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qdpvhza",
                    "quantity": "100000",
                },
                {
                    "address": "addr1q8zup8m9ue3p98kxlxl9q8rnyan8hw3ul282tsl9s326dfj088lvedv4zckcj24arcpasr0gua4c5gq4zw2rpcpjk2lq8cmd9l",
                    "quantity": "18605647",
                },
            ]
        ],
    )


class AssetPolicyItem(BaseModel):
    asset: Optional[str] = None
    """
    Concatenation of the policy_id and hex-encoded asset_name
    """
    quantity: Optional[str] = None
    """
    Current asset quantity
    """


class AssetPolicy(RootModel[Optional[List[AssetPolicyItem]]]):
    root: Optional[List[AssetPolicyItem]] = Field(
        None,
        examples=[
            [
                {
                    "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "1",
                },
                {
                    "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a766e",
                    "quantity": "100000",
                },
                {
                    "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb574636f696e",
                    "quantity": "18605647",
                },
            ]
        ],
    )


class Script(BaseModel):
    script_hash: Optional[str] = None
    """
    Script hash
    """


class Scripts(RootModel[Optional[List[Script]]]):
    root: Optional[List[Script]] = Field(
        None,
        examples=[
            [
                {
                    "script_hash": "13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1"
                },
                {
                    "script_hash": "e1457a0c47dfb7a2f6b8fbb059bdceab163c05d34f195b87b9f2b30e"
                },
                {
                    "script_hash": "a6e63c0ff05c96943d1cc30bf53112ffff0f34b45986021ca058ec54"
                },
            ]
        ],
    )


class Type3(Enum):
    """
    Type of the script language
    """

    timelock = "timelock"
    plutusV1 = "plutusV1"
    plutusV2 = "plutusV2"


class Script1(BaseModel):
    script_hash: Optional[str] = Field(
        None, examples=["13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1"]
    )
    """
    Script hash
    """
    type: Optional[Type3] = Field(None, examples=["plutusV1"])
    """
    Type of the script language
    """
    serialised_size: Optional[int] = Field(None, examples=[3119])
    """
    The size of the CBOR serialised script, if a Plutus script
    """


class ScriptJson(BaseModel):
    json_: Optional[Union[str, Dict[str, Any], List, int, float, bool]] = Field(
        None, alias="json"
    )
    """
    JSON contents of the `timelock` script, null for `plutus` scripts
    """


class ScriptCbor(BaseModel):
    cbor: Optional[str] = None
    """
    CBOR contents of the `plutus` script, null for `timelocks`
    """


class ScriptRedeemer(BaseModel):
    tx_hash: Optional[str] = Field(
        None,
        examples=["1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0"],
    )
    """
    Hash of the transaction
    """
    tx_index: Optional[int] = Field(None, examples=[0])
    """
    The index of the redeemer pointer in the transaction
    """
    purpose: Optional[Purpose] = Field(None, examples=["spend"])
    """
    Validation purpose
    """
    redeemer_data_hash: Optional[str] = Field(
        None,
        examples=["923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec"],
    )
    """
    Datum hash of the redeemer
    """
    datum_hash: Optional[str] = Field(
        None,
        examples=["923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec"],
    )
    """
    Datum hash
    """
    unit_mem: Optional[str] = Field(None, examples=["1700"])
    """
    The budget in Memory to run a script
    """
    unit_steps: Optional[str] = Field(None, examples=["476468"])
    """
    The budget in CPU steps to run a script
    """
    fee: Optional[str] = Field(None, examples=["172033"])
    """
    The fee consumed to run the script
    """


class ScriptRedeemers(RootModel[Optional[List[ScriptRedeemer]]]):
    root: Optional[List[ScriptRedeemer]] = None


class ScriptDatum(BaseModel):
    json_value: Optional[Dict[str, Any]] = None
    """
    JSON content of the datum
    """


class ScriptDatumCbor(BaseModel):
    cbor: Optional[str] = None
    """
    CBOR serialized datum
    """


class UtilsAddressesXpub(BaseModel):
    xpub: Optional[str] = None
    """
    Script hash
    """
    role: Optional[int] = None
    """
    Account role
    """
    index: Optional[int] = None
    """
    Address index
    """
    address: Optional[str] = None
    """
    Derived address
    """


class Metric(BaseModel):
    time: Optional[int] = None
    """
    Starting time of the call count interval (ends midnight UTC) in UNIX time
    """
    calls: Optional[int] = None
    """
    Sum of all calls for a particular day
    """


class Metrics(RootModel[Optional[List[Metric]]]):
    root: Optional[List[Metric]] = Field(
        None,
        examples=[
            [{"time": 1612543884, "calls": 42}, {"time": 1614523884, "calls": 6942}]
        ],
    )


class MetricsEndpoint(BaseModel):
    time: Optional[int] = None
    """
    Starting time of the call count interval (ends midnight UTC) in UNIX time
    """
    calls: Optional[int] = None
    """
    Sum of all calls for a particular day and endpoint
    """
    endpoint: Optional[str] = None
    """
    Endpoint parent name
    """


class MetricsEndpoints(RootModel[Optional[List[MetricsEndpoint]]]):
    root: Optional[List[MetricsEndpoint]] = Field(
        None,
        examples=[
            [
                {"time": 1612543814, "calls": 182, "endpoint": "block"},
                {"time": 1612543814, "calls": 42, "endpoint": "epoch"},
                {"time": 1612543812, "calls": 775, "endpoint": "block"},
                {"time": 1612523884, "calls": 4, "endpoint": "epoch"},
                {"time": 1612553884, "calls": 89794, "endpoint": "block"},
            ]
        ],
    )


class Supply(BaseModel):
    max: Optional[str] = Field(None, examples=["45000000000000000"])
    """
    Maximum supply in Lovelaces
    """
    total: Optional[str] = Field(None, examples=["32890715183299160"])
    """
    Current total (max supply - reserves) supply in Lovelaces
    """
    circulating: Optional[str] = Field(None, examples=["32412601976210393"])
    """
    Current circulating (UTXOs + withdrawables) supply in Lovelaces
    """
    locked: Optional[str] = Field(None, examples=["125006953355"])
    """
    Current supply locked by scripts in Lovelaces
    """
    treasury: Optional[str] = Field(None, examples=["98635632000000"])
    """
    Current supply locked in treasury
    """
    reserves: Optional[str] = Field(None, examples=["46635632000000"])
    """
    Current supply locked in reserves
    """


class Stake(BaseModel):
    live: Optional[str] = Field(None, examples=["23204950463991654"])
    """
    Current live stake in Lovelaces
    """
    active: Optional[str] = Field(None, examples=["22210233523456321"])
    """
    Current active stake in Lovelaces
    """


class Network(BaseModel):
    supply: Optional[Supply] = None
    stake: Optional[Stake] = None


class Start(BaseModel):
    """
    Start of the blockchain era,
    relative to the start of the network

    """

    time: Optional[float] = None
    """
    Time in seconds relative to the start time of the network
    """
    slot: Optional[int] = None
    """
    Absolute slot number
    """
    epoch: Optional[int] = None
    """
    Epoch number
    """


class End(BaseModel):
    """
    End of the blockchain era,
    relative to the start of the network

    """

    time: Optional[float] = None
    """
    Time in seconds relative to the start time of the network
    """
    slot: Optional[int] = None
    """
    Absolute slot number
    """
    epoch: Optional[int] = None
    """
    Epoch number
    """


class Parameters(BaseModel):
    """
    Era parameters
    """

    epoch_length: Optional[int] = None
    """
    Epoch length in number of slots
    """
    slot_length: Optional[float] = None
    """
    Slot length in seconds
    """
    safe_zone: Optional[int] = None
    """
    Zone in which it is guaranteed that no hard fork can take place
    """


class NetworkEra(BaseModel):
    start: Optional[Start] = None
    """
    Start of the blockchain era,
    relative to the start of the network

    """
    end: Optional[End] = None
    """
    End of the blockchain era,
    relative to the start of the network

    """
    parameters: Optional[Parameters] = None
    """
    Era parameters
    """


class NetworkEras(RootModel[Optional[List[NetworkEra]]]):
    root: Optional[List[NetworkEra]] = Field(
        None,
        examples=[
            [
                {
                    "start": {"time": 0, "slot": 0, "epoch": 0},
                    "end": {"time": 89856000, "slot": 4492800, "epoch": 208},
                    "parameters": {
                        "epoch_length": 21600,
                        "slot_length": 20,
                        "safe_zone": 4320,
                    },
                },
                {
                    "start": {"time": 89856000, "slot": 4492800, "epoch": 208},
                    "end": {"time": 101952000, "slot": 16588800, "epoch": 236},
                    "parameters": {
                        "epoch_length": 432000,
                        "slot_length": 1,
                        "safe_zone": 129600,
                    },
                },
            ]
        ],
    )


class NutlinkAddress(BaseModel):
    address: Optional[str] = Field(
        None,
        examples=[
            "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
        ],
    )
    """
    Bech32 encoded address
    """
    metadata_url: Optional[str] = Field(
        None, examples=["https://nut.link/metadata.json"]
    )
    """
    URL of the specific metadata file
    """
    metadata_hash: Optional[str] = Field(
        None,
        examples=["6bf124f217d0e5a0a8adb1dbd8540e1334280d49ab861127868339f43b3948af"],
    )
    """
    Hash of the metadata file
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    The cached metadata of the `metadata_url` file.
    """


class NutlinkAddressTicker(BaseModel):
    name: Optional[str] = None
    """
    Name of the ticker
    """
    count: Optional[int] = None
    """
    Number of ticker records
    """
    latest_block: Optional[int] = None
    """
    Block height of the latest record
    """


class NutlinkAddressTickers(RootModel[Optional[List[NutlinkAddressTicker]]]):
    root: Optional[List[NutlinkAddressTicker]] = Field(
        None,
        examples=[
            [
                {"name": "ADAUSD", "count": 1980038, "latest_block": 2657092},
                {"name": "ADAEUR", "count": 1980038, "latest_block": 2657092},
                {"name": "ADABTC", "count": 1980038, "latest_block": 2657092},
            ]
        ],
    )


class NutlinkAddressTickerItem(BaseModel):
    tx_hash: Optional[str] = None
    """
    Hash of the transaction
    """
    block_height: Optional[int] = None
    """
    Block height of the record
    """
    tx_index: Optional[int] = None
    """
    Transaction index within the block
    """
    payload: Optional[Union[str, Dict[str, Any], List, int, float, bool]] = None
    """
    Content of the ticker
    """


class NutlinkAddressTicker1(RootModel[Optional[List[NutlinkAddressTickerItem]]]):
    root: Optional[List[NutlinkAddressTickerItem]] = Field(
        None,
        examples=[
            [
                {
                    "tx_hash": "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
                    "block_height": 2657092,
                    "tx_index": 8,
                    "payload": [
                        {"source": "coinGecko", "value": "1.29"},
                        {"source": "cryptoCompare", "value": "1.283"},
                    ],
                }
            ]
        ],
    )


class NutlinkTickersTickerItem(BaseModel):
    address: Optional[str] = None
    """
    Address of a metadata oracle
    """
    tx_hash: Optional[str] = None
    """
    Hash of the transaction
    """
    block_height: Optional[int] = None
    """
    Block height of the record
    """
    tx_index: Optional[int] = None
    """
    Transaction index within the block
    """
    payload: Optional[Union[str, Dict[str, Any], List, int, float, bool]] = None
    """
    Content of the ticker
    """


class NutlinkTickersTicker(RootModel[Optional[List[NutlinkTickersTickerItem]]]):
    root: Optional[List[NutlinkTickersTickerItem]] = Field(
        None,
        examples=[
            [
                {
                    "address": "addr_test1qpmtp5t0t5y6cqkaz7rfsyrx7mld77kpvksgkwm0p7en7qum7a589n30e80tclzrrnj8qr4qvzj6al0vpgtnmrkkksnqd8upj0",
                    "tx_hash": "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
                    "block_height": 2657092,
                    "tx_index": 8,
                    "payload": [
                        {"source": "coinGecko", "value": "1.29"},
                        {"source": "cryptoCompare", "value": "1.283"},
                    ],
                }
            ]
        ],
    )


class File(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    name: Optional[str] = Field(None, examples=["myimage"])
    """
    Name of the file
    """
    mediaType: Optional[str] = Field(None, examples=["image/jpeg"])
    """
    Mime sub-type of image
    """
    src: Optional[Union[str, List[str]]] = Field(
        None, examples=["My NFT token description"]
    )
    """
    URI pointing to a resource of this mime type
    """


class AssetOnchainMetadataCip25(BaseModel):
    """
    On-chain metadata stored in the minting transaction under label 721,
    which adheres to https://cips.cardano.org/cips/cip25/

    """

    model_config = ConfigDict(
        extra="allow",
    )
    name: Optional[str] = Field(None, examples=["My NFT token"])
    """
    Name of the asset
    """
    image: Optional[Union[str, List[str]]] = Field(
        None, examples=["ipfs://ipfs/QmfKyJ4tuvHowwKQCbCHj4L5T3fSj8cjs7Aau8V7BWv226"]
    )
    """
    URI(s) of the associated asset
    """
    description: Optional[Union[str, List[str]]] = Field(
        None, examples=["My NFT token description"]
    )
    """
    Additional description
    """
    mediaType: Optional[str] = Field(None, examples=["image/jpeg"])
    """
    Mime sub-type of image
    """
    files: Optional[List[File]] = None


class AssetOnchainMetadataCip68Ft333(BaseModel):
    """
    On-chain metadata stored in the datum of the reference NFT output
    which adheres to 333 FT Standard https://cips.cardano.org/cips/cip68/

    """

    model_config = ConfigDict(
        extra="allow",
    )
    name: Optional[str] = Field(None, examples=["My FT token"])
    """
    Name of the asset
    """
    description: Optional[str] = Field(None, examples=["My FT token description"])
    """
    Additional description
    """
    logo: Optional[str] = Field(
        None, examples=["ipfs://ipfs/QmfKyJ4tuvHowwKQCbCHj4L5T3fSj8cjs7Aau8V7BWv226"]
    )
    """
    URI(s) of the associated asset
    """
    ticker: Optional[str] = Field(None, examples=["TOK"])
    """
    Ticker
    """
    decimals: Optional[float] = Field(None, examples=[8])
    """
    Number of decimals
    """


class AssetOnchainMetadataCip68Nft222(BaseModel):
    """
    On-chain metadata stored in the datum of the reference NFT output
    which adheres to 222 NFT Standard https://cips.cardano.org/cips/cip68/

    """

    model_config = ConfigDict(
        extra="allow",
    )
    name: Optional[str] = Field(None, examples=["My NFT token"])
    """
    Name of the asset
    """
    image: Optional[str] = Field(
        None, examples=["ipfs://ipfs/QmfKyJ4tuvHowwKQCbCHj4L5T3fSj8cjs7Aau8V7BWv226"]
    )
    """
    URI(s) of the associated asset
    """
    description: Optional[str] = Field(None, examples=["My NFT token description"])
    """
    Additional description
    """
    mediaType: Optional[str] = Field(None, examples=["image/jpeg"])
    """
    Mime sub-type of image
    """
    files: Optional[List[File]] = None


class AssetOnchainMetadataCip68Rft444(BaseModel):
    """
    On-chain metadata stored in the datum of the reference NFT output
    which adheres to 222 NFT Standard https://cips.cardano.org/cips/cip68/

    """

    model_config = ConfigDict(
        extra="allow",
    )
    name: Optional[str] = Field(None, examples=["My NFT token"])
    """
    Name of the asset
    """
    image: Optional[str] = Field(
        None, examples=["ipfs://ipfs/QmfKyJ4tuvHowwKQCbCHj4L5T3fSj8cjs7Aau8V7BWv226"]
    )
    """
    URI(s) of the associated asset
    """
    description: Optional[str] = Field(None, examples=["My NFT token description"])
    """
    Additional description
    """
    mediaType: Optional[str] = Field(None, examples=["image/jpeg"])
    """
    Mime sub-type of image
    """
    decimals: Optional[float] = Field(None, examples=[8])
    """
    Number of decimals
    """
    files: Optional[List[File]] = None


class OnchainMetadataCip25(RootModel[Optional[AssetOnchainMetadataCip25]]):
    root: Optional[AssetOnchainMetadataCip25] = None


class OnchainMetadataCip68Ft333(RootModel[Optional[AssetOnchainMetadataCip68Ft333]]):
    root: Optional[AssetOnchainMetadataCip68Ft333] = None


class OnchainMetadataCip68Nft222(RootModel[Optional[AssetOnchainMetadataCip68Nft222]]):
    root: Optional[AssetOnchainMetadataCip68Nft222] = None


class OnchainMetadataCip68Rft444(RootModel[Optional[AssetOnchainMetadataCip68Rft444]]):
    root: Optional[AssetOnchainMetadataCip68Rft444] = None
